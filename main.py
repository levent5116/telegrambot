import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import API_TOKEN, STEAM_API_KEY

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_profiles = {}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_PROFILES_PER_USER = 5

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@dp.message_handler(commands=['register'])
async def register_user(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∏ Steam ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: /register –ò–≤–∞–Ω 76561197960435530")
        return

    try:
        profile_name, steam_id = args.split(maxsplit=1)
        if not steam_id.isdigit():
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Steam ID. Steam ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
            return

        user_id = message.from_user.id
        if user_id not in user_profiles:
            user_profiles[user_id] = {}

        if len(user_profiles[user_id]) >= MAX_PROFILES_PER_USER:
            await message.reply(f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_PROFILES_PER_USER} –ø—Ä–æ—Ñ–∏–ª–µ–π.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Steam ID —á–µ—Ä–µ–∑ Steam API
        if not await validate_steam_id(steam_id):
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π Steam ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
            return

        user_profiles[user_id][profile_name] = steam_id
        await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ò–º—è: {profile_name}, Steam ID: {steam_id}.")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /register –ò–≤–∞–Ω 76561197960435530")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Steam ID —á–µ—Ä–µ–∑ Steam API
async def validate_steam_id(steam_id):
    url = f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key={STEAM_API_KEY}&steamids={steam_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data.get("response", {}).get("players", []) != []
            return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@dp.message_handler(commands=['list'])
async def list_profiles(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_profiles or not user_profiles[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.")
        return

    reply_message = "–í–∞—à–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n"
    for profile_name, steam_id in user_profiles[user_id].items():
        reply_message += f"‚Ä¢ {profile_name}: {steam_id}\n"

    await message.reply(reply_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
@dp.message_handler(commands=['delete'])
async def delete_profile(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_profiles or not user_profiles[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.")
        return

    args = message.get_args()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete –ò–≤–∞–Ω")
        return

    profile_name = args.strip()
    if profile_name not in user_profiles[user_id]:
        await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —Å –∏–º–µ–Ω–µ–º {profile_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    del user_profiles[user_id][profile_name]
    await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å {profile_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def fetch_steam_games(steam_id):
    url = f"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key={STEAM_API_KEY}&steamid={steam_id}&include_appinfo=true&format=json"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data
            else:
                return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /steam
@dp.message_handler(commands=['steam'])
async def fetch_steam_user(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_profiles or not user_profiles[user_id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω Steam ID —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for profile_name in user_profiles[user_id]:
        button = InlineKeyboardButton(profile_name, callback_data=f"steam_{profile_name}")
        keyboard.add(button)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–∞—Ö:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è /steam
@dp.callback_query_handler(lambda c: c.data.startswith('steam_'))
async def process_steam_profile(callback_query: types.CallbackQuery):
    profile_name = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    steam_id = user_profiles[user_id][profile_name]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    games_data = await fetch_steam_games(steam_id)
    if games_data and 'response' in games_data and 'games' in games_data['response'] and 'game_count' in games_data['response']:
        games = games_data['response']['games']
        game_count = games_data['response']['game_count']
        total_playtime = sum(game.get('playtime_forever', 0) for game in games) // 60  # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö

        games = sorted(games, key=lambda x: x['playtime_forever'], reverse=True)
        top_games = games[:5]  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –∏–≥—Ä

        reply_message = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}:\n'
        reply_message += f"‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {game_count}\n"
        reply_message += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö: {total_playtime} —á.\n"
        reply_message += f"\nüéÆ –¢–æ–ø-5 –∏–≥—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n"
        for game in top_games:
            game_name = game.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
            playtime = game.get('playtime_forever', 0) // 60  # –í—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
            reply_message += f"‚Ä¢ {game_name}: {playtime} —á.\n"

        await bot.send_message(callback_query.from_user.id, reply_message)
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å Steam –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–≥—Ä.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def fetch_steam_user(message: types.Message):
    await message.reply(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/register {–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è} {Steam ID} - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π Steam ID.\n'
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.\n'
        '/delete {–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è} - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n'
        '/steam - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–∞—Ö.\n'
        '/track - –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n'
        '/untrack - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n'
        '/info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ.\n'
        '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ Steam ID:\n'
        '1. –ó–∞–π–¥–∏—Ç–µ –≤ Steam.\n'
        '2. –ù–∞–∂–º–∏—Ç–µ "–û–± –∞–∫–∫–∞—É–Ω—Ç–µ".\n'
        '3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Steam ID –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@dp.message_handler(commands=['info'])
async def show_profile_info(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_profiles or not user_profiles[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.")
        return

    args = message.get_args()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–∏–º–µ—Ä: /info –ò–≤–∞–Ω")
        return

    profile_name = args.strip()
    if profile_name not in user_profiles[user_id]:
        await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —Å –∏–º–µ–Ω–µ–º {profile_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    steam_id = user_profiles[user_id][profile_name]
    games_data = await fetch_steam_games(steam_id)
    if games_data and 'response' in games_data and 'games' in games_data['response'] and 'game_count' in games_data['response']:
        games = games_data['response']['games']
        game_count = games_data['response']['game_count']
        total_playtime = sum(game.get('playtime_forever', 0) for game in games) // 60  # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö

        reply_message = f'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ {profile_name}:\n'
        reply_message += f"‚Ä¢ Steam ID: {steam_id}\n"
        reply_message += f"‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {game_count}\n"
        reply_message += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö: {total_playtime} —á.\n"

        await message.reply(reply_message)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ.")

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
tracked_users = {}

async def fetch_steam_status(steam_id):
    url = f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key={STEAM_API_KEY}&format=json&steamids={steam_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data and "response" in data and "players" in data["response"]:
                    return data["response"]["players"][0]
            return None

async def track_user_activity(steam_id, chat_id, profile_name):
    last_game = None

    while steam_id in tracked_users:  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        status = await fetch_steam_status(steam_id)
        if status:
            game_name = status.get("gameextrainfo")
            if game_name and game_name != last_game:
                last_game = game_name
                await bot.send_message(chat_id, f"üéÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile_name} –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å –≤ {game_name}.")
            elif not game_name and last_game:
                await bot.send_message(chat_id, f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile_name} –±–æ–ª—å—à–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç.")
                last_game = None
        await asyncio.sleep(30)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (30 —Å–µ–∫—É–Ω–¥)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /track
@dp.message_handler(commands=['track'])
async def start_tracking(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_profiles or not user_profiles[user_id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω Steam ID —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for profile_name in user_profiles[user_id]:
        button = InlineKeyboardButton(profile_name, callback_data=f"track_{profile_name}")
        keyboard.add(button)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è /track
@dp.callback_query_handler(lambda c: c.data.startswith('track_'))
async def process_track_profile(callback_query: types.CallbackQuery):
    profile_name = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    steam_id = user_profiles[user_id][profile_name]

    if steam_id in tracked_users:
        await bot.send_message(callback_query.from_user.id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {profile_name} —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ.")
        return

    tracked_users[steam_id] = callback_query.from_user.id
    await bot.send_message(callback_query.from_user.id, f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è {profile_name}.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    asyncio.create_task(track_user_activity(steam_id, callback_query.from_user.id, profile_name))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /untrack
@dp.message_handler(commands=['untrack'])
async def stop_tracking(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_profiles or not user_profiles[user_id]:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω Steam ID —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    for profile_name in user_profiles[user_id]:
        button = InlineKeyboardButton(profile_name, callback_data=f"untrack_{profile_name}")
        keyboard.add(button)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è /untrack
@dp.callback_query_handler(lambda c: c.data.startswith('untrack_'))
async def process_untrack_profile(callback_query: types.CallbackQuery):
    profile_name = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    steam_id = user_profiles[user_id][profile_name]

    if steam_id not in tracked_users:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ—Ñ–∏–ª—å {profile_name} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    del tracked_users[steam_id]  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
    await bot.send_message(callback_query.from_user.id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {profile_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

@dp.message_handler()
async def some_message(msg: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    steam_button = InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Steam", callback_data="track_steam_activity")
    keyboard = InlineKeyboardMarkup().add(steam_button)

    await msg.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Steam.", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'track_steam_activity')
async def process_callback_track_steam(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /track, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
